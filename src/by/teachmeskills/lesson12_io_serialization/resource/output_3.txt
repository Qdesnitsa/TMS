Чудо Java : байт-код


Основная особенность JavaJ, которая позволяет решать описанные выше проблемы обеспечения безопасности и переносимости программ, состоит в том, что
компилятор Java выдает не исполняемый код, а так называемый байт-код - в высшей степени оптимизированный набор инструкций, предназначенных для выполнения в исполняющей системе Java, называемой виртуалъной машиной Jаvа 
(Java Virtual Machine -JVM)


Основная особенность JavaJ, которая позволяет решать описанные выше проблемы обеспечения безопасности и переносимости программ, состоит в том, что
компилятор Java выдает не исполняемый код, а так называемый байт-код - в высшей степени оптимизированный набор инструкций, предназначенных для выполнения в исполняющей системе Java, называемой виртуалъной машиной Jаvа 
(Java Virtual Machine -JVM)

Трансляция программы Java в байт-код значительно упрощает ее выполнение
в разнотипных средах, поскольку на каждой платформе необходимо реализовать
только виртуальную машину JVМ
 Если в отдельной системе имеется исполняющий пакет, в ней можно выполнять любую программу на Java

Тот факт, что программа нa Java выполняется виртуальной машиной JVМ, способствует также повышению ее безопасности

В общем, когда программа компилируется в промежуточную форму, а затем интерпретируется виртуальной машиной JVM, она выполняется медленнее, чем если
бы она была скомпилирована в исполняемый код
 Но в Java это отличие в производительности не слишком заметно

Язык Java бьш задуман как интерпретируемый, но ничто не препятствует ему
оперативно выполнять компиляцию байт-кода в машинозависимый код для повышения производительности
 Важно понимать, что одновременная компиляция всей программыjаvа в исполняемый код
нецелесообразна, поскольку Java производит различные проверки, которые могут
быть сделаны только во время выполнения


Объектно-ориентированное программирование (ООП) составляет основу
Java
 По существу, все программы на Java являются в какой-то степени объектноориентированными
 Язык Java связан с ООП настолько тесно, что прежде чем
приступить к написанию на нем даже простейших программ, следует вначале ознакомиться с основными принципами ООП

Принципы ООП лежат как в основе языка Java, так и восприятия мира человеком

Основу инкапсуляции в Java составляет класс
 (То, что программирующие нa Java называют методами, программирующие на С/С++ называют функциями
) В программах, правильно написанных на Java, методы определяют, каким образом используются переменные-члены
 А в Java,
благодаря принципу полиморфизма, для обращения со с теком можно определить
общий ряд служе бных программ под одними и теми же общими именами
 Точнее говоря, в каждой программе нaJava применяются принципы инкапсуляции, наследования и полиморфизма
 Как станет ясно в дальнейшем, многие языковые средства Java являются составной частью встроенных библиотек классов,
в которых широко применяются принципы инкапсуляции, наследования и полиморфизма

